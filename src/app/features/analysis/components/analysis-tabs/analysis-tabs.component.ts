import { CommonModule } from '@angular/common';
import { Component, input, signal } from '@angular/core';

import { Recommendation } from '../../models/analysis.types';

interface AnalysisTabsData {
  liquidityStatus: string;
  dailyBudget?: number;
  availableForInvestment?: number;
  totalExpenses?: number;
  salary?: number;
  recommendations?: Recommendation[];
  expenses?: {
    name: string;
    amount: number;
    color: string;
    percentage: number;
  }[];
  financialHealthAssessment?: {
    overall_score: string;
    liquidity_status: string;
    debt_burden: string;
    cash_flow: string;
  };
}

@Component({
  selector: 'app-analysis-tabs',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './analysis-tabs.component.html',
  styleUrls: ['./analysis-tabs.component.scss']
})
export class AnalysisTabsComponent {
  public data = input.required<AnalysisTabsData>();

  public activeTab = signal<'ai-tips' | 'expense-analysis'>('ai-tips');
  public slideDirection = signal<'left' | 'right'>('right');

  public formatCurrency(amount: number): string {
    return new Intl.NumberFormat('ru-RU').format(amount);
  }

  public formatCurrencySafely(value: string): string {
    // Handle cases where the value contains text instead of just numbers
    if (value.includes('UZS')) {
      // Extract number from "2980000.00 UZS" format
      const numMatch = value.match(/(\d+(?:\.\d+)?)/);
      if (numMatch) {
        const num = parseFloat(numMatch[1]);
        if (!isNaN(num)) {
          return this.formatCurrency(num);
        }
      }
    }

    // Try direct parsing for pure numbers
    const num = parseFloat(value);
    if (isNaN(num)) {
      return '–Ω–µ —á–∏—Å–ª–æ';
    }
    return this.formatCurrency(num);
  }

  public getExpectedReturnText(expectedReturn: string, productType: string): string {
    // Handle emergency fund case
    if (productType === 'emergency_fund') {
      if (expectedReturn === 'Emergency coverage') {
        return '–ü–æ–∫—Ä—ã—Ç–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤';
      }
      return expectedReturn;
    }

    // For other products, try to format as currency
    const formatted = this.formatCurrencySafely(expectedReturn);
    if (formatted === '–Ω–µ —á–∏—Å–ª–æ') {
      return expectedReturn; // Return original text if not a number
    }
    return formatted + ' —Å—É–º';
  }

  public getProductDisplayName(productType: string): string {
    const productNames: Record<string, string> = {
      'microloan': '–ú–∏–∫—Ä–æ–∑–∞–π–º',
      'online_loan': '–û–Ω–ª–∞–π–Ω –∑–∞–π–º',
      'overdraft': '–û–≤–µ—Ä–¥—Ä–∞—Ñ—Ç',
      'credit_line': '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –ª–∏–Ω–∏—è',
      'consumer_loan': '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç',
      'gold': '–ó–æ–ª–æ—Ç–æ',
      'foyda_deposit': '–î–µ–ø–æ–∑–∏—Ç ¬´–§–æ–π–¥–∞¬ª',
      'qulay_deposit': '–î–µ–ø–æ–∑–∏—Ç ¬´“ö—É–ª–∞–π¬ª',
      'gold_investment': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∑–æ–ª–æ—Ç–æ',
      'usd_deposit': '–î–µ–ø–æ–∑–∏—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö',
      'emergency_fund': '–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥',
    };
    return productNames[productType] || productType;
  }

  public getProductIcon(productType: string): string {
    const productIcons: Record<string, string> = {
      'microloan': 'üí∞',
      'online_loan': 'üíª',
      'overdraft': 'üåç',
      'credit_line': 'üí≥',
      'consumer_loan': 'üè†',
      'gold': 'ü™ô',
      'foyda_deposit': 'üè¶',
      'qulay_deposit': 'üè¶',
      'gold_investment': 'ü™ô',
      'usd_deposit': 'üíµ',
      'emergency_fund': 'üõ°Ô∏è'
    };
    return productIcons[productType] || 'üí°';
  }

  public getCategoryBackgroundClass(category: string): string {
    const categoryClasses: Record<string, string> = {
      'investment': 'bg-green-500',
      'emergency': 'bg-orange-400',
      'optimization': 'bg-sky-500'
    };
    return categoryClasses[category] || 'bg-sky-500';
  }

  public getExpenseAnalysisText(): string {
    const assessment = this.data().financialHealthAssessment;
    if (!assessment) return '–û—Ç–ª–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏';

    const overallScore = parseInt(assessment.overall_score);
    const liquidityStatus = assessment.liquidity_status;
    const debtBurden = assessment.debt_burden;

    if (overallScore >= 80 && liquidityStatus === 'good' && debtBurden === 'healthy') {
      return '–û—Ç–ª–∏—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏';
    } else if (overallScore >= 60 && liquidityStatus === 'moderate') {
      return '–•–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏';
    } else {
      return '–¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–Ω—å–≥–∞–º–∏';
    }
  }

  public getExpensePercentage(): number {
    if (!this.data().totalExpenses || !this.data().salary) return 50;
    return Math.round((this.data().totalExpenses! / this.data().salary!) * 100);
  }

  public getFutureTips(): string[] {
    const assessment = this.data().financialHealthAssessment;
    const availableForInvestment = this.data().availableForInvestment;
    const salary = this.data().salary;

    const tips: string[] = [];

    if (assessment) {
      const overallScore = parseInt(assessment.overall_score);

      if (overallScore >= 80) {
        tips.push('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
        tips.push('‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å');
        tips.push('‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥');
      } else if (overallScore >= 60) {
        tips.push('‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥');
        tips.push('‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã');
        tips.push('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞');
      } else {
        tips.push('‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã');
        tips.push('‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤');
        tips.push('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é –∫—Ä–µ–¥–∏—Ç–æ–≤');
      }
    }

    if (availableForInvestment && availableForInvestment > 1000000) {
      tips.push('‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –ò–ü –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞');
    }

    if (salary && salary > 5000000) {
      tips.push('‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å');
    }

    return tips.length > 0 ? tips : [
      '‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      '‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
      '‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–æ–Ω–¥',
      '‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –ò–ü –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞'
    ];
  }

  public onTabChange(value: 'ai-tips' | 'expense-analysis'): void {
    const currentTab = this.activeTab();
    const newTab = value;

    // Determine slide direction
    if (currentTab === 'ai-tips' && newTab === 'expense-analysis') {
      this.slideDirection.set('right');
    } else if (currentTab === 'expense-analysis' && newTab === 'ai-tips') {
      this.slideDirection.set('left');
    }

    this.activeTab.set(value);
  }
}
